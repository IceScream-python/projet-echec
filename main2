import math


class piece:
    def __init__(self,absisse,ordonnee,couleur):
        self.x = absisse
        self.y = ordonnee
        self.couleur = couleur

    def mouvement(self,deplacement_x, deplacement_y):
        categories = [pion, fou, reine, tour, cavalier]
        if self.x != None and self.y != None:
            if plateau.contenu_case(self.x+deplacement_x,self.y+deplacement_y)[0] == "empty":
                plateau.plateau_jeu[self.y+deplacement_y-1][self.x+deplacement_x-1] = (self, self.x+deplacement_x, self.y+deplacement_y)
                plateau.plateau_jeu[self.y-1][self.x-1] = ("empty",self.x,self.y)
                self.y += deplacement_y
                self.x += deplacement_x
            elif type(plateau.contenu_case(self.x+deplacement_x,self.y+deplacement_y)[0]) in categories and plateau.contenu_case(self.x+deplacement_x,self.y+deplacement_y)[0].couleur != self.couleur:
                plateau.contenu_case(self.x+deplacement_x,self.y+deplacement_y)[0].est_mange()
                plateau.plateau_jeu[self.y+deplacement_y-1][self.x+deplacement_x-1] = (self, self.x+deplacement_x, self.y+deplacement_y)
                plateau.plateau_jeu[self.y-1][self.x-1] = ("empty",self.x,self.y)
                self.y += deplacement_y
                self.x += deplacement_x
            else:
                return False
            return True
	
    def est_mange(self):
        self.x = None
        self.y = None

class pion(piece):
    def __init__(self,absisse,ordonnee,couleur):
        self.categorie = 'pion'+str(couleur[0]).upper()
        super().__init__(absisse,ordonnee,couleur)

    def __str__(self):
        return f"Pion {self.couleur}, ({self.x},{self.y})"


    def peut_avancer(self,x,y):
        if (abs(x-self.x) == 1 and self.y == y) or (self.x == x and abs(y-self.y) == 1):
            return self.mouvement(x-self.x,y-self.y)
        else:
            return False

class fou(piece):
    def __init__(self,absisse,ordonnee,couleur):
        self.categorie = 'fou_'+str(couleur[0]).upper()
        super().__init__(absisse,ordonnee,couleur)

    def __str__(self):
        return f"Fou {self.couleur}, ({self.x},{self.y})"


    def peut_avancer(self,x,y):
        if abs(self.x-x) == 1  and abs(self.y -y) == 1:
            return self.mouvement(x-self.x,y-self.y)
        else:
            return False

class tour(piece):
    def __init__(self,absisse,ordonnee,couleur):
        self.categorie = 'tour'+str(couleur[0]).upper()
        super().__init__(absisse,ordonnee,couleur)

    def __str__(self):
        return f"Tour {self.couleur}, ({self.x},{self.y})"

    def peut_avancer(self,x,y):
        if (self.x == x and self.y != y) or (self.y == y and self.x != x):
            if plateau.peut_avancer_ligne(self,x,y):
                return self.mouvement(x-self.x,y-self.y)


class reine(piece):
    def __init__(self,absisse,ordonnee,couleur):
        self.categorie = 'reine'+str(couleur[0]).upper()
        super().__init__(absisse,ordonnee,couleur)

    def __str__(self):
        return f"Reine {self.couleur}, ({self.x},{self.y})"

    def peut_avancer(self,x,y):
        if (abs(x-self.x) == abs(y-self.y) and x != self.x ) or (self.x == x and y != self.y) or (self.y == y and self.x != x):
            if plateau.peut_avancer_ligne(self,x,y):
                return self.mouvement(x-self.x,y-self.y)
        else:
            return False


class cavalier(piece):
    def __init__(self,absisse,ordonnee,couleur):
        self.categorie = 'cavalier'+str(couleur[0]).upper()
        super().__init__(absisse,ordonnee,couleur)
    
    def __str__(self):
        return f"Cavalier {self.couleur}, ({self.x},{self.y})"

    def peut_avancer(self,x,y):
        if (abs(x - self.x) == 2 and abs(y - self.y) == 1) or (abs(x - self.x) == 1 and abs(y - self.y == 2)):
            return self.mouvement(x-self.x,y-self.y)
        else:
            return False

class Plateau:
    def __init__(self, liste, size):
        self.plateau_jeu = list()
        self.coordonees = {}
        for pion in liste:
            self.coordonees[(pion.x,pion.y)] = pion
        for y in range(1, size+1):
            self.plateau_jeu.append( list() )
            for x in range(1, size+1):
                try:
                    self.plateau_jeu[y-1].append( (self.coordonees[(x,y)],x,y) )
                except:
                    self.plateau_jeu[y-1].append( ("empty",x,y) )

    def __str__(self):
        string=" "
        for i in range(1,size_plateau+1):
            string += " "*5 + str(i) + " "*4
        for y in self.plateau_jeu:
            string +=  "\n\n" + correspondance[y[0][2]]
            for x in y:
                string += "|"
                try:
                    string += x[0].categorie + " " * (9-len(x[0].categorie))
                except:
                    string += x[0] + " "*4
            string += "|"
        return string

    def contenu_case(self,x,y):
        try:
            assert x!=0 and y!=0
            return self.plateau_jeu[y-1][x-1]
        except Exception as error:
            return error

    def peut_avancer_ligne(self,piece,x,y):
        sx = int(math.copysign(1,x))
        sy = int(math.copysign(1,y))

        if piece.x == x:
            for i in range(1,abs(y-piece.y)):
                if not plateau.contenu_case(piece.x,piece.y+ (sy*i))[0] =='empty':
                    return False
        elif piece.y == y:
            for i in range(1,abs(x-piece.x)):
                if not plateau.contenu_case(piece.x + (sx * i),piece.y)[0] == 'empty':
                    return False
        else:
            for i in range(1,abs(x-piece.x)):
                if not plateau.contenu_case(piece.x + (sx * i),piece.y+ (sy*i))[0]:
                    print(plateau.contenu_case(piece.x + (sx * i),piece.y+ (sy*i))[0])
                    return False
        return True

    def nombre_piece(self, couleur):
        compteur = 0
        for y in self.plateau_jeu:
            for x in y:
                try:
                    if x[0].couleur == couleur:
                        compteur += 1
                except:
                    pass
        print(couleur, compteur)
        return compteur

def fini():
    if plateau.nombre_piece('blanc') == 0:
        return True
    elif plateau.nombre_piece('noir') == 0:
        return True
    return False

correspondance = {'A':1,1:'A','B':2,2:'B','C':3,3:'C','D':4,4:'D','E':5,5:'E','F':6,6:'F','G':7,7:'G'}
size_plateau = 7
liste_piece = []

for i in range(1,size_plateau+1):
    liste_piece.append( pion(i,2,"blanc"))
    liste_piece.append( pion(i,size_plateau-1,"noir"))
    if i == size_plateau or i==1:
        liste_piece.append(tour(i,1,'blanc'))
        liste_piece.append(tour(i,size_plateau,'noir'))
    elif i== size_plateau-1 or i == 2:
        liste_piece.append( fou(i,1,'blanc') )
        liste_piece.append( fou(i,size_plateau,'noir') )
    elif i == size_plateau-2 or i == 3:
        liste_piece.append( cavalier(i,1,'blanc') )
        liste_piece.append( cavalier(i,size_plateau,'noir') )
    elif i== (size_plateau+1)//2:
        liste_piece.append( reine(i,1,'blanc') )
        liste_piece.append( reine(i,size_plateau,'noir') )
plateau = Plateau(liste_piece,size_plateau)

tour = 0
while not fini():
    if tour%2==0:
        joueur = 'blanc'
    else:
        joueur = 'noir'
    print(plateau)
    print(f"\nTour des {joueur}s ")
    depart = input("\nQuelle pièce voulez vous bouger?\n" )
    try:
        assert plateau.contenu_case( int( depart[1:] ) , correspondance[ depart[0:1] ] )[0].couleur == joueur
        arrive = input(f"\nSur quelle case voulez vous deplacer votre {plateau.contenu_case( int( depart[1:] ) , correspondance[ depart[0:1] ] )[0].categorie[:-1] }?\n")
        try:
            assert plateau.contenu_case( int( depart[1:] ) , correspondance[ depart[0:1] ] )[0].peut_avancer(int(arrive[1:]), correspondance[ arrive[0:1] ]  )
            tour+=1
        except Exception as e:
            print(e)
            print("\nVotre pièce ne peut pas se deplacer vers cet endroit.\n")
    except:
        print("\nCette case ne contient pas une de vos pièces\n")

if plateau.nombre_piece('blanc') == 0:
        print( "Victoire des Noirs")
elif plateau.nombre_piece('noir') == 0:
        print( "Victoire des Blancs")
